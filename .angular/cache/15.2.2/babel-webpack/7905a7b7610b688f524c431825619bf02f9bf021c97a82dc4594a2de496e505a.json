{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./ngx-hz-datepicker.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"hzDatePicker\"];\nconst _c1 = function (a0) {\n  return {\n    \"is-weekend\": a0\n  };\n};\nfunction HZDatePickerComponent_div_0_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function HZDatePickerComponent_div_0_div_8_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const btn_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.onDateClick(btn_r3));\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const btn_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"display\", (ctx_r2.dpConfig == null ? null : ctx_r2.dpConfig.showDays) ? \"block\" : \"none\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c1, btn_r3.isWeekend));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(3, 9, btn_r3.date, ctx_r2.dpConfig == null ? null : ctx_r2.dpConfig.dayFormat), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMapInterpolate2(\"dp-button dp-button-day \", ctx_r2.dpConfig == null ? null : ctx_r2.dpConfig.btnClasses, \" \", btn_r3.isSelected ? ctx_r2.dpConfig == null ? null : ctx_r2.dpConfig.selectedItemClass : \"\", \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", btn_r3.text, \" \");\n  }\n}\nfunction HZDatePickerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1, 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 5)(5, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function HZDatePickerComponent_div_0_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onMonthNavClick(ctx_r6.MONTH_NAVS.PREV));\n    });\n    i0.ɵɵtext(6, \"<<\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 7);\n    i0.ɵɵtemplate(8, HZDatePickerComponent_div_0_div_8_Template, 6, 14, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 9)(10, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function HZDatePickerComponent_div_0_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onMonthNavClick(ctx_r8.MONTH_NAVS.NEXT));\n    });\n    i0.ɵɵtext(11, \">>\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"h4\", 10);\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"date\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵclassMapInterpolate1(\"dp-button dp-button-prev \", ctx_r0.dpConfig == null ? null : ctx_r0.dpConfig.navBtnClasses, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.daysOfMonth);\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMapInterpolate1(\"dp-button dp-button-next \", ctx_r0.dpConfig == null ? null : ctx_r0.dpConfig.navBtnClasses, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(14, 8, ctx_r0.selectedDate, ctx_r0.dpConfig == null ? null : ctx_r0.dpConfig.selectedDateFormat), \" \");\n  }\n}\nexport class HZDatePickerComponent {\n  constructor(dpService) {\n    this.dpService = dpService;\n    this.onDateChange = new EventEmitter();\n    this.viewLoaded = false;\n    this.isCallInProgress = false;\n    this.daysOfMonth = [];\n    this.selectedDate = new Date();\n    this.MONTH_NAVS = {\n      NEXT: 'next',\n      PREV: 'previous'\n    };\n    this.validDayFormats = [\"E\", \"EEE\", \"EEEE\"];\n  }\n  ngOnInit() {}\n  ngAfterViewInit() {\n    this.updateDateBtns();\n    this.setDefaultConfigValues();\n    setTimeout(() => {\n      this.viewLoaded = true;\n    }, 0);\n  }\n  /**\n   * @author Ahsan Ayaz\n   * Sets the inital config properties to be used by the datepicker template\n   */\n  setDefaultConfigValues() {\n    this.dpConfig = this.dpConfig || {};\n    this.dpConfig.dayFormat = this.dpConfig.dayFormat ? this.dpConfig.dayFormat : 'E';\n    if (this.validDayFormats.indexOf(this.dpConfig.dayFormat) == -1) {\n      throw new Error(\"Invalid day format in dpConfig, supported formats are = \" + this.validDayFormats.join());\n    }\n    this.dpConfig.selectedDateFormat = this.dpConfig.selectedDateFormat ? this.dpConfig.selectedDateFormat : 'fullDate';\n    this.dpConfig.selectedItemClass = this.dpConfig.selectedItemClass ? this.dpConfig.selectedItemClass + ' selected' : 'selected';\n  }\n  /**\n   * @author Ahsan Ayaz\n   * This function is triggered when a date is clicked from the dates list\n   * @param dayBtn\n   */\n  onDateClick(dayBtn) {\n    this.daysOfMonth.forEach(btn => {\n      btn.isSelected = false;\n    });\n    dayBtn.isSelected = true;\n    this.selectedDate = dayBtn.date;\n    this.onDateChange.emit(this.selectedDate);\n  }\n  /**\n   * @author Ahsan Ayaz\n   * This function updates the buttons to display using the current date\n   * @param date\n   */\n  updateDateBtns(date) {\n    this.daysOfMonth = this.dpService.getDaysOfMonth(date);\n    this.isCallInProgress = true;\n    setTimeout(() => {\n      this.isCallInProgress = false;\n    }, 1500);\n  }\n  /**\n   * @author Ahsan Ayaz\n   * This function is triggered when the user clicks on any of the next month nav button or previous month nav button\n   * Fetches the next month's buttons from service and updates the buttons on view.\n   * Also sets the same date of the next month as selected date\n   * @param target\n   */\n  onMonthNavClick(target) {\n    let targetMonth = target == this.MONTH_NAVS.NEXT ? this.selectedDate.getMonth() + 1 : this.selectedDate.getMonth() - 1;\n    let dateToSet = this.selectedDate.getDate();\n    let targetMonthDaysCount = this.dpService.daysInMonth(new Date(), this.selectedDate.getFullYear(), targetMonth);\n    if (dateToSet > targetMonthDaysCount) {\n      dateToSet = targetMonthDaysCount;\n    }\n    let neededDate = new Date(this.selectedDate.getFullYear(), targetMonth, dateToSet);\n    this.updateDateBtns(neededDate);\n    this.selectedDate = this.daysOfMonth[neededDate.getDate() - 1].date;\n    this.onDateChange.emit(this.selectedDate);\n  }\n}\nHZDatePickerComponent.ɵfac = function HZDatePickerComponent_Factory(t) {\n  return new (t || HZDatePickerComponent)(i0.ɵɵdirectiveInject(i1.NgxHzDatepickerComponent));\n};\nHZDatePickerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HZDatePickerComponent,\n  selectors: [[\"hz-date-picker\"]],\n  viewQuery: function HZDatePickerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hzDatePicker = _t.first);\n    }\n  },\n  inputs: {\n    dpConfig: \"dpConfig\"\n  },\n  outputs: {\n    onDateChange: \"onDateChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"hz-datepicker-container\", 4, \"ngIf\"], [1, \"hz-datepicker-container\"], [\"hzDatePicker\", \"\"], [1, \"hz-datepicker-inner\"], [1, \"days\"], [1, \"days-prev\"], [3, \"click\"], [1, \"days-inner\"], [\"class\", \"day-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"days-next\"], [1, \"text-center\", \"selected-date\"], [1, \"day-item\"], [1, \"weekday\", 3, \"ngClass\"]],\n  template: function HZDatePickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HZDatePickerComponent_div_0_Template, 15, 11, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.viewLoaded);\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i2.DatePipe],\n  styles: [\".hz-datepicker-container[_ngcontent-%COMP%] {\\n      max-width: 400px;\\n      margin: 0 auto;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%] {\\n      display: flex;\\n      flex-direction: row;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .days-next[_ngcontent-%COMP%], .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .days-prev[_ngcontent-%COMP%] {\\n      align-self: flex-end;\\n      padding-bottom: 10px;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .days-prev[_ngcontent-%COMP%] {\\n      justify-content: flex-start;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .days-next[_ngcontent-%COMP%] {\\n      justify-content: flex-end;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .days-inner[_ngcontent-%COMP%] {\\n      margin: 0 4px;\\n      overflow-y: hidden;\\n      overflow-x: auto;\\n      white-space: nowrap;\\n      max-width: 100%;\\n      padding-bottom: 10px;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .day-item[_ngcontent-%COMP%] {\\n      text-align: center;\\n      flex: 1;\\n      display: inline-block;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .day-item[_ngcontent-%COMP%]   .weekday.is-weekend[_ngcontent-%COMP%] {\\n      color: orange;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .days[_ngcontent-%COMP%]   .day-item[_ngcontent-%COMP%]   .dp-button-day.selected[_ngcontent-%COMP%] {\\n      font-weight: 800;\\n    }\\n    .hz-datepicker-container[_ngcontent-%COMP%]   .hz-datepicker-inner[_ngcontent-%COMP%]   .selected-date[_ngcontent-%COMP%] {\\n      margin: 10px 0;\\n    }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3Byb2plY3RzL25neC1oei1kYXRlcGlja2VyL3NyYy9saWIvbmd4LWh6LWRhdGVwaWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7SUFDSTtNQUNFLGdCQUFnQjtNQUNoQixjQUFjO0lBQ2hCO0lBQ0E7TUFDRSxhQUFhO01BQ2IsbUJBQW1CO0lBQ3JCO0lBQ0E7TUFDRSxvQkFBb0I7TUFDcEIsb0JBQW9CO0lBQ3RCO0lBQ0E7TUFDRSwyQkFBMkI7SUFDN0I7SUFDQTtNQUNFLHlCQUF5QjtJQUMzQjtJQUNBO01BQ0UsYUFBYTtNQUNiLGtCQUFrQjtNQUNsQixnQkFBZ0I7TUFDaEIsbUJBQW1CO01BQ25CLGVBQWU7TUFDZixvQkFBb0I7SUFDdEI7SUFDQTtNQUNFLGtCQUFrQjtNQUNsQixPQUFPO01BQ1AscUJBQXFCO0lBQ3ZCO0lBQ0E7TUFDRSxhQUFhO0lBQ2Y7SUFDQTtNQUNFLGdCQUFnQjtJQUNsQjtJQUNBO01BQ0UsY0FBYztJQUNoQiIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgIC5oei1kYXRlcGlja2VyLWNvbnRhaW5lciB7XG4gICAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgfVxuICAgIC5oei1kYXRlcGlja2VyLWNvbnRhaW5lciAuaHotZGF0ZXBpY2tlci1pbm5lciAuZGF5cyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICB9XG4gICAgLmh6LWRhdGVwaWNrZXItY29udGFpbmVyIC5oei1kYXRlcGlja2VyLWlubmVyIC5kYXlzIC5kYXlzLW5leHQsIC5oei1kYXRlcGlja2VyLWNvbnRhaW5lciAuaHotZGF0ZXBpY2tlci1pbm5lciAuZGF5cyAuZGF5cy1wcmV2IHtcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gICAgfVxuICAgIC5oei1kYXRlcGlja2VyLWNvbnRhaW5lciAuaHotZGF0ZXBpY2tlci1pbm5lciAuZGF5cyAuZGF5cy1wcmV2IHtcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICB9XG4gICAgLmh6LWRhdGVwaWNrZXItY29udGFpbmVyIC5oei1kYXRlcGlja2VyLWlubmVyIC5kYXlzIC5kYXlzLW5leHQge1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICB9XG4gICAgLmh6LWRhdGVwaWNrZXItY29udGFpbmVyIC5oei1kYXRlcGlja2VyLWlubmVyIC5kYXlzIC5kYXlzLWlubmVyIHtcbiAgICAgIG1hcmdpbjogMCA0cHg7XG4gICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgICBvdmVyZmxvdy14OiBhdXRvO1xuICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgIH1cbiAgICAuaHotZGF0ZXBpY2tlci1jb250YWluZXIgLmh6LWRhdGVwaWNrZXItaW5uZXIgLmRheXMgLmRheS1pdGVtIHtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuICAgIC5oei1kYXRlcGlja2VyLWNvbnRhaW5lciAuaHotZGF0ZXBpY2tlci1pbm5lciAuZGF5cyAuZGF5LWl0ZW0gLndlZWtkYXkuaXMtd2Vla2VuZCB7XG4gICAgICBjb2xvcjogb3JhbmdlO1xuICAgIH1cbiAgICAuaHotZGF0ZXBpY2tlci1jb250YWluZXIgLmh6LWRhdGVwaWNrZXItaW5uZXIgLmRheXMgLmRheS1pdGVtIC5kcC1idXR0b24tZGF5LnNlbGVjdGVkIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XG4gICAgfVxuICAgIC5oei1kYXRlcGlja2VyLWNvbnRhaW5lciAuaHotZGF0ZXBpY2tlci1pbm5lciAuc2VsZWN0ZWQtZGF0ZSB7XG4gICAgICBtYXJnaW46IDEwcHggMDtcbiAgICB9XG5cbiAgXG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","HZDatePickerComponent","constructor","dpService","Date","NEXT","PREV","ngOnInit","ngAfterViewInit","updateDateBtns","setDefaultConfigValues","setTimeout","viewLoaded","dpConfig","dayFormat","validDayFormats","indexOf","Error","join","selectedDateFormat","selectedItemClass","onDateClick","dayBtn","daysOfMonth","forEach","btn","isSelected","selectedDate","date","onDateChange","emit","getDaysOfMonth","isCallInProgress","onMonthNavClick","target","targetMonth","MONTH_NAVS","getMonth","dateToSet","getDate","targetMonthDaysCount","daysInMonth","getFullYear","neededDate","selectors","viewQuery"],"sourceRoot":"","sources":["/Users/andrea/salt/Ashan_Collaboration/ng2-hz-datepicker/projects/ngx-hz-datepicker/src/lib/ngx-hz-datepicker.component.ts"],"sourcesContent":["\nimport { Component, ViewChild, ElementRef, OnInit, AfterViewInit, Input, EventEmitter, Output } from '@angular/core';\nimport { NgxHzDatepickerComponent } from './ngx-hz-datepicker.service';\n\n\nexport interface DPConfig {\n  btnClasses?: string,\n  navBtnClasses?: string,\n  showDays?: boolean,\n  dayFormat?: string,\n  selectedItemClass?: string,\n  selectedDateFormat?: string\n}\n\n@Component({\n  selector: 'hz-date-picker',\n  template: `\n    <div #hzDatePicker class=\"hz-datepicker-container\"  *ngIf=\"viewLoaded\">\n      <div class=\"hz-datepicker-inner\">\n          <div class=\"days\">\n              <div class=\"days-prev\">\n                  <button class=\"dp-button dp-button-prev {{dpConfig?.navBtnClasses}}\" (click)=\"onMonthNavClick(MONTH_NAVS.PREV)\"><<</button>\n              </div>\n              <div class=\"days-inner\">\n                  <div *ngFor=\"let btn of daysOfMonth\" class=\"day-item\">\n                      <div [style.display]=\"dpConfig?.showDays? 'block' : 'none'\" class=\"weekday\" [ngClass]=\"{'is-weekend': btn.isWeekend}\">\n                          {{btn.date | date: dpConfig?.dayFormat}}\n                      </div>\n                      <button \n                          class=\"dp-button dp-button-day {{dpConfig?.btnClasses}} {{btn.isSelected? dpConfig?.selectedItemClass : ''}}\"\n                          (click)=\"onDateClick(btn)\">\n                          {{btn.text}}\n                      </button>\n                  </div>\n                  \n              </div>\n              <div class=\"days-next\">\n                  <button class=\"dp-button dp-button-next {{dpConfig?.navBtnClasses}}\" (click)=\"onMonthNavClick(MONTH_NAVS.NEXT)\">>></button>\n              </div>\n          </div>\n          <h4 class=\"text-center selected-date\">\n              {{selectedDate | date : dpConfig?.selectedDateFormat}}\n          </h4>\n      </div>\n  </div>\n  `,\n  styles: [`\n    .hz-datepicker-container {\n      max-width: 400px;\n      margin: 0 auto;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days {\n      display: flex;\n      flex-direction: row;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .days-next, .hz-datepicker-container .hz-datepicker-inner .days .days-prev {\n      align-self: flex-end;\n      padding-bottom: 10px;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .days-prev {\n      justify-content: flex-start;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .days-next {\n      justify-content: flex-end;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .days-inner {\n      margin: 0 4px;\n      overflow-y: hidden;\n      overflow-x: auto;\n      white-space: nowrap;\n      max-width: 100%;\n      padding-bottom: 10px;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .day-item {\n      text-align: center;\n      flex: 1;\n      display: inline-block;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .day-item .weekday.is-weekend {\n      color: orange;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .days .day-item .dp-button-day.selected {\n      font-weight: 800;\n    }\n    .hz-datepicker-container .hz-datepicker-inner .selected-date {\n      margin: 10px 0;\n    }\n\n  \n  `]\n})\nexport class HZDatePickerComponent implements OnInit, AfterViewInit {\n  @ViewChild('hzDatePicker') hzDatePicker: ElementRef | undefined;\n  @Input('dpConfig') dpConfig: DPConfig | undefined;\n  @Output() onDateChange: EventEmitter<Date> = new EventEmitter();\n  viewLoaded: boolean = false;\n  dayFormat: string | undefined;\n  isCallInProgress: boolean = false;\n  daysOfMonth: Array<any> = [];\n  selectedDate: Date = new Date();\n  MONTH_NAVS: any = {\n    NEXT: 'next',\n    PREV: 'previous'\n  }\n  private validDayFormats: Array<string> = [\"E\", \"EEE\", \"EEEE\"];\n  constructor(private dpService: NgxHzDatepickerComponent) { }\n\n  ngOnInit() {\n\n  }\n\n  ngAfterViewInit() {\n    this.updateDateBtns();\n    this.setDefaultConfigValues();\n    setTimeout(() => {\n      this.viewLoaded = true;\n    }, 0);\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * Sets the inital config properties to be used by the datepicker template\n   */\n  setDefaultConfigValues() {\n    this.dpConfig = this.dpConfig || {};\n    this.dpConfig.dayFormat = this.dpConfig.dayFormat ? this.dpConfig.dayFormat : 'E';\n    if (this.validDayFormats.indexOf(this.dpConfig.dayFormat) == -1) {\n      throw new Error(\"Invalid day format in dpConfig, supported formats are = \" + this.validDayFormats.join());\n    }\n    this.dpConfig.selectedDateFormat = this.dpConfig.selectedDateFormat ? this.dpConfig.selectedDateFormat : 'fullDate';\n    this.dpConfig.selectedItemClass = this.dpConfig.selectedItemClass ? this.dpConfig.selectedItemClass + ' selected' : 'selected';\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * This function is triggered when a date is clicked from the dates list\n   * @param dayBtn \n   */\n  onDateClick(dayBtn: any) {\n    this.daysOfMonth.forEach((btn) => {\n      btn.isSelected = false;\n    });\n    dayBtn.isSelected = true;\n    this.selectedDate = dayBtn.date;\n    this.onDateChange.emit(this.selectedDate);\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * This function updates the buttons to display using the current date\n   * @param date \n   */\n  updateDateBtns(date?: Date) {\n    this.daysOfMonth = this.dpService.getDaysOfMonth(date);\n    this.isCallInProgress = true;\n    setTimeout(() => {\n      this.isCallInProgress = false;\n    }, 1500)\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * This function is triggered when the user clicks on any of the next month nav button or previous month nav button\n   * Fetches the next month's buttons from service and updates the buttons on view.\n   * Also sets the same date of the next month as selected date\n   * @param target \n   */\n  onMonthNavClick(target: string) {\n    let targetMonth = (target == this.MONTH_NAVS.NEXT) ? this.selectedDate.getMonth() + 1 : this.selectedDate.getMonth() - 1;\n    let dateToSet = this.selectedDate.getDate();\n    let targetMonthDaysCount = this.dpService.daysInMonth(new Date(), this.selectedDate.getFullYear(), targetMonth);\n    if (dateToSet > targetMonthDaysCount) {\n      dateToSet = targetMonthDaysCount;\n    }\n    let neededDate = new Date(this.selectedDate.getFullYear(), targetMonth, dateToSet);\n    this.updateDateBtns(neededDate);\n    this.selectedDate = this.daysOfMonth[neededDate.getDate() - 1].date;\n    this.onDateChange.emit(this.selectedDate);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}