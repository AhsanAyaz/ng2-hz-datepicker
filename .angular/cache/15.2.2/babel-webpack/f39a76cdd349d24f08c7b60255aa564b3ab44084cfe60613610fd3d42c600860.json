{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class NgxHzDatepickerComponent {\n  constructor() {}\n  ngOnInit() {}\n  /**\n   * @author Ahsan Ayaz\n   * This function returns an array of custom objects representing days information in the given month\n   * @param dateObj{Date}\n   * @returns {Array}\n   */\n  getDaysOfMonth(dateObj = new Date()) {\n    let days = [];\n    let noOfDays = this.daysInMonth(dateObj);\n    for (var i = 1, len = noOfDays; i <= len; i++) {\n      let text = i.toString();\n      // grab current date and check passed arguments.\n      let date, month, year;\n      date = i; //setting the date here\n      if (!month || month === undefined) {\n        month = dateObj.getMonth();\n      }\n      if (!year || year === undefined) {\n        year = dateObj.getFullYear();\n      }\n      let currDate = new Date(year, month, date);\n      days.push({\n        text: text,\n        date: currDate,\n        isWeekend: currDate.getDay() == 6 || currDate.getDay() == 0,\n        isSelected: dateObj.getDate() == i\n      });\n    }\n    return days;\n  }\n  /**\n   * @author Ahsan Ayaz\n   * Returns if the dateObject passed is an actual Date\n   * @param dateObj {Date}\n   * @returns {boolean} istDate value\n   */\n  isDate(dateObj) {\n    var date = dateObj ? new Date(dateObj.toString()) : null;\n    return date !== null && !isNaN(date) && date.getDate() !== undefined;\n  }\n  /**\n   * @author Ahsan Ayaz\n   * Calculates the no of days in the given date or using given year and month\n   * @param dateObj {Date}\n   * @param year {number}\n   * @param month {number}\n   * @returns no of days {number}\n   */\n  daysInMonth(dateObj, year, month) {\n    year = dateObj ? dateObj.getFullYear() : year;\n    month = dateObj ? dateObj.getMonth() : month;\n    if (year === undefined || month === undefined) {\n      throw new Error('Year and month parameters are required');\n    }\n    let startDate = new Date(year, month, 1),\n      endDate = new Date(year, month + 1, 1);\n    let calc = (endDate - startDate) / (1000 * 60 * 60 * 24);\n    return parseInt(calc, 10);\n  }\n  /**\n   * @author Ahsan Ayaz\n   * Calculates the no of weeks in the given date (month)\n   * @param dateObj {Date}\n   * @returns number of days {number}\n   */\n  weeksInMonth(dateObj) {\n    let year = dateObj.getFullYear();\n    let month = dateObj.getMonth();\n    var firstOfMonth = new Date(year, month - 1, 1),\n      lastOfMonth = new Date(year, month, 0),\n      used = firstOfMonth.getDay() + lastOfMonth.getDate();\n    return Math.ceil(used / 7);\n  }\n}\nNgxHzDatepickerComponent.ɵfac = function NgxHzDatepickerComponent_Factory(t) {\n  return new (t || NgxHzDatepickerComponent)();\n};\nNgxHzDatepickerComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NgxHzDatepickerComponent,\n  factory: NgxHzDatepickerComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["NgxHzDatepickerComponent","constructor","ngOnInit","getDaysOfMonth","dateObj","Date","days","noOfDays","daysInMonth","i","len","text","toString","date","month","year","undefined","getMonth","getFullYear","currDate","push","isWeekend","getDay","isSelected","getDate","isDate","isNaN","Error","startDate","endDate","calc","parseInt","weeksInMonth","firstOfMonth","lastOfMonth","used","Math","ceil","factory","providedIn"],"sourceRoot":"","sources":["/Users/andrea/salt/Ashan_Collaboration/ng2-hz-datepicker/projects/ngx-hz-datepicker/src/lib/ngx-hz-datepicker.service.ts"],"sourcesContent":["\nimport { Injectable, OnInit } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxHzDatepickerComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * This function returns an array of custom objects representing days information in the given month\n   * @param dateObj{Date}\n   * @returns {Array}\n   */\n  getDaysOfMonth(dateObj = new Date()): Array<any> {\n    let days = [];\n    let noOfDays = this.daysInMonth(dateObj);\n    for (var i = 1, len = noOfDays; i <= len; i++) {\n      let text = i.toString();\n      // grab current date and check passed arguments.\n      let date, month, year;\n      date = i; //setting the date here\n      if (!month || month === undefined) {\n        month = dateObj.getMonth();\n      }\n      if (!year || year === undefined) {\n        year = dateObj.getFullYear();\n      }\n      let currDate = new Date(year, month, date);\n\n      days.push({\n        text: text,\n        date: currDate,\n        isWeekend: (currDate.getDay() == 6 || currDate.getDay() == 0),\n        isSelected: dateObj.getDate() == i\n      });\n    }\n    return days;\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * Returns if the dateObject passed is an actual Date\n   * @param dateObj {Date}\n   * @returns {boolean} istDate value\n   */\n  isDate(dateObj: Date): boolean {\n    var date: any = dateObj ? new Date(dateObj.toString()) : null;\n    return (date !== null) && !isNaN(date) && (date.getDate() !== undefined);\n  }\n\n\n  /**\n   * @author Ahsan Ayaz\n   * Calculates the no of days in the given date or using given year and month\n   * @param dateObj {Date}\n   * @param year {number}\n   * @param month {number}\n   * @returns no of days {number}\n   */\n  daysInMonth(dateObj: Date, year?: number, month?: number): number {\n    year = dateObj ? dateObj.getFullYear() : year;\n    month = dateObj ? dateObj.getMonth() : month;\n    if (year === undefined || month === undefined) {\n      throw new Error('Year and month parameters are required');\n    }\n    let startDate: any = new Date(year, month, 1),\n      endDate: any = new Date(year, month + 1, 1);\n    let calc: any = (endDate - startDate) / (1000 * 60 * 60 * 24);\n    return parseInt(calc, 10);\n  }\n\n  /**\n   * @author Ahsan Ayaz\n   * Calculates the no of weeks in the given date (month)\n   * @param dateObj {Date}\n   * @returns number of days {number}\n   */\n  weeksInMonth(dateObj: Date): number {\n    let year = dateObj.getFullYear();\n    let month = dateObj.getMonth();\n    var firstOfMonth = new Date(year, month - 1, 1),\n      lastOfMonth = new Date(year, month, 0),\n      used = firstOfMonth.getDay() + lastOfMonth.getDate();\n    return Math.ceil(used / 7);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}